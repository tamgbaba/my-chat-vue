{"ast":null,"code":"import '@/views/modules/chat/css/messageBox.css';\nexport default {\n  data() {\n    return {\n      userData: {},\n      message: '',\n      socket: '',\n      socketPath: 'ws://'\n    };\n  },\n  created() {},\n  mounted() {\n    this.getUserIp();\n  },\n  methods: {\n    getUserIp() {\n      this.$http.get(`/chat/ip/address`).then(({\n        data\n      }) => {\n        this.userData = data.data;\n        this.init();\n      }).catch(() => {});\n    },\n    init() {\n      if (typeof WebSocket === 'undefined') {\n        alert('您的浏览器不支持socket');\n      } else {\n        // 实例化socket\n        this.socket = new WebSocket(this.socketPath);\n        // 监听socket连接\n        this.socket.onopen = this.open;\n        // 监听socket错误信息\n        this.socket.onerror = this.error;\n        // 监听socket消息\n        this.socket.onmessage = this.getMessage;\n      }\n    },\n    open: function () {\n      console.log('socket连接成功');\n    },\n    error: function () {\n      console.log('连接错误');\n    },\n    getMessage: function (msg) {\n      console.log(msg.data);\n    },\n    send: function () {\n      this.socket.send(params);\n    },\n    close: function () {\n      console.log('socket已经关闭');\n    }\n  }\n};","map":{"version":3,"names":["data","userData","message","socket","socketPath","created","mounted","getUserIp","methods","$http","get","then","init","catch","WebSocket","alert","onopen","open","onerror","error","onmessage","getMessage","console","log","msg","send","params","close"],"sources":["src/views/modules/chat/messageBox.vue"],"sourcesContent":["<template>\r\n  <el-container style=\"height: 100%\">\r\n    <!-- 顶部操作栏 -->\r\n    <el-header>###</el-header>\r\n    <!-- 主页面 -->\r\n    <el-main style=\"height: 100%\">\r\n      <div class=\"chat-box\">\r\n        <div class=\"chat-left\"></div>\r\n        <div class=\"chat-right\">\r\n          <div class=\"input-chat-box\">\r\n            <div slot=\"header\" class=\"clearfix\">\r\n              <span>\r\n                {{\r\n                  '当前ip:  ' +\r\n                  userData.userIp +\r\n                  '::' +\r\n                  userData.province +\r\n                  userData.city\r\n                }}</span\r\n              >\r\n            </div>\r\n          </div>\r\n          <div class=\"output-chat-box\">\r\n            <el-row>\r\n              <el-input\r\n                type=\"textarea\"\r\n                :rows=\"4\"\r\n                placeholder=\"请输入内容\"\r\n                v-model=\"message\"\r\n              >\r\n              </el-input>\r\n              <el-button type=\"success\" plain>发送</el-button>\r\n              <el-button type=\"info\">取消</el-button>\r\n            </el-row>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </el-main>\r\n    <!-- 底部页面 -->\r\n    <el-footer>###</el-footer>\r\n  </el-container>\r\n</template>\r\n\r\n<script>\r\nimport '@/views/modules/chat/css/messageBox.css'\r\nexport default {\r\n  data() {\r\n    return {\r\n      userData: {},\r\n      message: '',\r\n      socket: '',\r\n      socketPath: 'ws://',\r\n    }\r\n  },\r\n\r\n  created() {},\r\n  mounted() {\r\n    this.getUserIp()\r\n  },\r\n  methods: {\r\n    getUserIp() {\r\n      this.$http\r\n        .get(`/chat/ip/address`)\r\n        .then(({ data }) => {\r\n          this.userData = data.data\r\n          this.init()\r\n        })\r\n        .catch(() => {})\r\n    },\r\n    init() {\r\n      if (typeof WebSocket === 'undefined') {\r\n        alert('您的浏览器不支持socket')\r\n      } else {\r\n        // 实例化socket\r\n        this.socket = new WebSocket(this.socketPath)\r\n        // 监听socket连接\r\n        this.socket.onopen = this.open\r\n        // 监听socket错误信息\r\n        this.socket.onerror = this.error\r\n        // 监听socket消息\r\n        this.socket.onmessage = this.getMessage\r\n      }\r\n    },\r\n    open: function () {\r\n      console.log('socket连接成功')\r\n    },\r\n    error: function () {\r\n      console.log('连接错误')\r\n    },\r\n    getMessage: function (msg) {\r\n      console.log(msg.data)\r\n    },\r\n    send: function () {\r\n      this.socket.send(params)\r\n    },\r\n    close: function () {\r\n      console.log('socket已经关闭')\r\n    },\r\n\r\n  },\r\n}\r\n</script>\r\n<style></style>\r\n"],"mappings":"AA4CA;AACA;EACAA,KAAA;IACA;MACAC,QAAA;MACAC,OAAA;MACAC,MAAA;MACAC,UAAA;IACA;EACA;EAEAC,QAAA;EACAC,QAAA;IACA,KAAAC,SAAA;EACA;EACAC,OAAA;IACAD,UAAA;MACA,KAAAE,KAAA,CACAC,GAAA,qBACAC,IAAA;QAAAX;MAAA;QACA,KAAAC,QAAA,GAAAD,IAAA,CAAAA,IAAA;QACA,KAAAY,IAAA;MACA,GACAC,KAAA;IACA;IACAD,KAAA;MACA,WAAAE,SAAA;QACAC,KAAA;MACA;QACA;QACA,KAAAZ,MAAA,OAAAW,SAAA,MAAAV,UAAA;QACA;QACA,KAAAD,MAAA,CAAAa,MAAA,QAAAC,IAAA;QACA;QACA,KAAAd,MAAA,CAAAe,OAAA,QAAAC,KAAA;QACA;QACA,KAAAhB,MAAA,CAAAiB,SAAA,QAAAC,UAAA;MACA;IACA;IACAJ,IAAA,WAAAA,CAAA;MACAK,OAAA,CAAAC,GAAA;IACA;IACAJ,KAAA,WAAAA,CAAA;MACAG,OAAA,CAAAC,GAAA;IACA;IACAF,UAAA,WAAAA,CAAAG,GAAA;MACAF,OAAA,CAAAC,GAAA,CAAAC,GAAA,CAAAxB,IAAA;IACA;IACAyB,IAAA,WAAAA,CAAA;MACA,KAAAtB,MAAA,CAAAsB,IAAA,CAAAC,MAAA;IACA;IACAC,KAAA,WAAAA,CAAA;MACAL,OAAA,CAAAC,GAAA;IACA;EAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}