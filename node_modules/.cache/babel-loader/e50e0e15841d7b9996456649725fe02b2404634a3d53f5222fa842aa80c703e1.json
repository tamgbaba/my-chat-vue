{"ast":null,"code":"import axios from 'axios';\nconst service = axios.create({\n  baseURL: 'http://localhost:8081',\n  timeout: 5000,\n  withCredentials: true,\n  headers: {\n    get: {\n      'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'\n    },\n    post: {\n      'Content-Type': 'application/json;charset=utf-8'\n    }\n  }\n});\n\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  return config;\n}, error => {\n  // 错误抛到业务代码\n  error.data = {};\n  error.data.msg = '服务器异常，请联系管理员！';\n  return Promise.resolve(error);\n});\n// 响应拦截器\nservice.interceptors.response.use(response => {\n  const status = response.status;\n  let msg = '';\n  if (status < 200 || status >= 300) {\n    // 处理http错误，抛到业务代码\n    msg = CODE_MESSAGE[parseInt(status)];\n    if (typeof response.data === 'string') {\n      response.data = {\n        msg\n      };\n    } else {\n      ElMessage.error(msg);\n      response.data.msg = msg;\n    }\n  }\n  return response;\n}, error => {\n  // 错误抛到业务代码\n  error.data = {};\n  error.data.msg = '请求超时或服务器异常，请检查网络或联系管理员！';\n  return Promise.resolve(error);\n});\nexport default service;","map":{"version":3,"names":["axios","service","create","baseURL","timeout","withCredentials","headers","get","post","interceptors","request","use","config","error","data","msg","Promise","resolve","response","status","CODE_MESSAGE","parseInt","ElMessage"],"sources":["H:/sweetheart/my-chat-vue/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\n\r\nconst service = axios.create({\r\n  baseURL: 'http://localhost:8081',\r\n  timeout: 5000,\r\n  withCredentials: true,\r\n  headers: {\r\n    get: {\r\n      'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8',\r\n    },\r\n    post: {\r\n      'Content-Type': 'application/json;charset=utf-8',\r\n    },\r\n  },\r\n})\r\n\r\n// 请求拦截器\r\nservice.interceptors.request.use(\r\n  (config) => {\r\n    return config\r\n  },\r\n  (error) => {\r\n    // 错误抛到业务代码\r\n    error.data = {}\r\n    error.data.msg = '服务器异常，请联系管理员！'\r\n    return Promise.resolve(error)\r\n  }\r\n)\r\n// 响应拦截器\r\nservice.interceptors.response.use(\r\n  (response) => {\r\n    const status = response.status\r\n    let msg = ''\r\n    if (status < 200 || status >= 300) {\r\n      // 处理http错误，抛到业务代码\r\n      msg = CODE_MESSAGE[parseInt(status)]\r\n      if (typeof response.data === 'string') {\r\n        response.data = { msg }\r\n      } else {\r\n        ElMessage.error(msg)\r\n        response.data.msg = msg\r\n      }\r\n    }\r\n    return response\r\n  },\r\n  (error) => {\r\n    // 错误抛到业务代码\r\n    error.data = {}\r\n    error.data.msg = '请求超时或服务器异常，请检查网络或联系管理员！'\r\n    return Promise.resolve(error)\r\n  }\r\n)\r\n\r\nexport default service\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC3BC,OAAO,EAAE,uBAAuB;EAChCC,OAAO,EAAE,IAAI;EACbC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;IACPC,GAAG,EAAE;MACH,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAE;MACJ,cAAc,EAAE;IAClB;EACF;AACF,CAAC,CAAC;;AAEF;AACAP,OAAO,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CAC7BC,MAAM,IAAK;EACV,OAAOA,MAAM;AACf,CAAC,EACAC,KAAK,IAAK;EACT;EACAA,KAAK,CAACC,IAAI,GAAG,CAAC,CAAC;EACfD,KAAK,CAACC,IAAI,CAACC,GAAG,GAAG,eAAe;EAChC,OAAOC,OAAO,CAACC,OAAO,CAACJ,KAAK,CAAC;AAC/B,CAAC,CACF;AACD;AACAZ,OAAO,CAACQ,YAAY,CAACS,QAAQ,CAACP,GAAG,CAC9BO,QAAQ,IAAK;EACZ,MAAMC,MAAM,GAAGD,QAAQ,CAACC,MAAM;EAC9B,IAAIJ,GAAG,GAAG,EAAE;EACZ,IAAII,MAAM,GAAG,GAAG,IAAIA,MAAM,IAAI,GAAG,EAAE;IACjC;IACAJ,GAAG,GAAGK,YAAY,CAACC,QAAQ,CAACF,MAAM,CAAC,CAAC;IACpC,IAAI,OAAOD,QAAQ,CAACJ,IAAI,KAAK,QAAQ,EAAE;MACrCI,QAAQ,CAACJ,IAAI,GAAG;QAAEC;MAAI,CAAC;IACzB,CAAC,MAAM;MACLO,SAAS,CAACT,KAAK,CAACE,GAAG,CAAC;MACpBG,QAAQ,CAACJ,IAAI,CAACC,GAAG,GAAGA,GAAG;IACzB;EACF;EACA,OAAOG,QAAQ;AACjB,CAAC,EACAL,KAAK,IAAK;EACT;EACAA,KAAK,CAACC,IAAI,GAAG,CAAC,CAAC;EACfD,KAAK,CAACC,IAAI,CAACC,GAAG,GAAG,yBAAyB;EAC1C,OAAOC,OAAO,CAACC,OAAO,CAACJ,KAAK,CAAC;AAC/B,CAAC,CACF;AAED,eAAeZ,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}